{"version":3,"sources":["Stopwatch/Timer/Timer.js","Stopwatch/ControlButtons/ControlButtons.js","Stopwatch/Stopwatch.js","Text/Text.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","className","Math","floor","time","slice","ControlButtons","useState","buttonState","setButtonState","words","setWords","numberOfWords","split","length","StartButton","onClick","handleStart","PauseButton","handlePauseResume","isPaused","active","onChange","event","word","target","value","disabled","onPaste","e","preventDefault","alert","type","placeholder","rows","Stopwatch","isActive","setIsActive","setIsPaused","setTime","moment","startTime","setStartTime","endTime","setEndTime","timeTaken","setTimeTaken","useEffect","interval","setInterval","clearInterval","wordsPerMinute","console","log","duration","diff","asMinutes","Text","p","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ee2e76f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Timer.css\";\n\nconst Timer = (props) => {\n    return (\n        <div className='time'>\n            <span className=\"digits hour\">{(\"0\" + Math.floor((props.time / 3600000) % 60)).slice(-2)}:</span>\n            <span className=\"digits minute\">{(\"0\" + Math.floor((props.time / 60000) % 60)).slice(-2)}:</span>\n            <span className=\"digits second\">{(\"0\" + Math.floor((props.time / 1000) % 60)).slice(-2)}:</span>\n            <span className=\"digits milSec\">{(\"0\" + ((props.time / 10) % 100)).slice(-2)}</span>\n        </div>\n    );\n}\n\nexport default Timer","import React, { useState } from \"react\";\nimport \"./ControlButtons.css\";\n\nconst ControlButtons = (props) => {\n\n    const [buttonState, setButtonState] = useState(true)\n    const [words, setWords] = useState('')\n\n    const numberOfWords = words.split(/[ .:;?!~,`\"&|]+/).length;\n\n    const onChange = (word) => {\n        setWords(word)\n        // props.onChange(word)\n\n    }\n\n    const handleStart = () => {\n        props.handleStart()\n        setButtonState(!buttonState)\n    }\n\n    const StartButton = (\n        <div className=\"btn\" onClick={handleStart}>Start</div>\n    );\n\n    const PauseButton = (\n        <div className=\"btn\" onClick={props.handlePauseResume}>\n            {props.isPaused ? \"Resume\" : \"Pause\"}\n        </div>\n    )\n\n    const handleChange = (e) => {\n        e.preventDefault();\n        alert('Paste Is Not Allowed')\n    };\n\n    return (\n        <div className='buttons'>\n            <h1>Number Of Words Written = {numberOfWords}</h1>\n            <div className='button'>{props.active ? PauseButton : StartButton}</div>\n            <textarea className='input'\n                onChange={event => /*setWords*/onChange(event.target.value)}\n                disabled={buttonState || props.isPaused}\n                onPaste={handleChange}\n                // {...numberOfWords}\n                type=\"text\"\n                placeholder=\"Type The Text Here\"\n                rows='11'\n            />\n        </div>\n    );\n}\n\nexport default ControlButtons","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\"\nimport \"./StopWatch.css\";\n\nconst Stopwatch = (props) => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n    const [startTime, setStartTime] = useState(moment());\n    const [endTime, setEndTime] = useState(moment())\n    const [timeTaken, setTimeTaken] = useState(moment())\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, isPaused]);\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsPaused(false);\n        setStartTime(moment())\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused)\n        setEndTime(moment())\n        setTimeTaken(moment.duration(endTime.diff(startTime)).asMinutes())\n        console.log(setTimeTaken)\n    };\n\n        let wordsPerMinute =props.numberOfWords/timeTaken\n        console.log(wordsPerMinute)\n\n    return (\n        <div className=\"stop-watch\">\n            <Timer time={time} />\n            <ControlButtons\n                active={isActive}\n                isPaused={isPaused}\n                handleStart={handleStart}\n                handlePauseResume={handlePauseResume}\n                // onChange={onChange}\n            />\n        </div>\n    );\n}\n\nexport default Stopwatch;\n","import React from 'react'\nimport { LoremIpsum } from 'react-lorem-ipsum'\nimport \"./Text.css\";\n\nconst Text = () => {\n    return <div className=\"text-wrapper\">\n        <LoremIpsum p={3} />\n    </div>\n}\n\nexport default Text\n","import React from \"react\";\nimport Stopwatch from \"./Stopwatch/Stopwatch\";\nimport Text from \"./Text/Text\";\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <Stopwatch />\n      </header>\n      <div>\n        <Text />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}