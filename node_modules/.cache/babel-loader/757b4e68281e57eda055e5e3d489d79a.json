{"ast":null,"code":"var _jsxFileName = \"/home/pacewisdom/workspace/React/typing skill checker/src/Stopwatch/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import Timer from \"./Timer/Timer\";\n\nimport \"./Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\"; // import Input from \"../Input/Input\"\n\nimport \"./StopWatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stopwatch = props => {\n  _s();\n\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(true);\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime(time => time + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n\n  const handleStart = () => {\n    // removeAttribute('disabled');\n    setIsActive(true);\n    setIsPaused(false);\n  };\n\n  const handlePauseResume = () => {\n    setIsPaused(!isPaused);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stop-watch\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"digits hour\",\n        children: [(\"0\" + Math.floor(props.time / 3600000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"digits minute\",\n        children: [(\"0\" + Math.floor(props.time / 60000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"digits second\",\n        children: [(\"0\" + Math.floor(props.time / 1000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"digits milSec\",\n        children: (\"0\" + props.time / 10 % 100).slice(-2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlButtons, {\n      active: isActive,\n      isPaused: isPaused,\n      handleStart: handleStart,\n      handlePauseResume: handlePauseResume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Stopwatch, \"SZkA2mnjq1bM+1ovwKx7+JaUQPI=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/pacewisdom/workspace/React/typing skill checker/src/Stopwatch/Stopwatch.js"],"names":["React","useState","useEffect","ControlButtons","Stopwatch","props","isActive","setIsActive","isPaused","setIsPaused","time","setTime","interval","setInterval","clearInterval","handleStart","handlePauseResume","Math","floor","slice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAiB,SAAjB;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CACA;;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,GAAG,IAAf;;AACA,QAAIN,QAAQ,IAAIE,QAAQ,KAAK,KAA7B,EAAoC;AAChCI,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACzBF,QAAAA,OAAO,CAAED,IAAD,IAAUA,IAAI,GAAG,EAAlB,CAAP;AACH,OAFqB,EAEnB,EAFmB,CAAtB;AAGH,KAJD,MAIO;AACHI,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AACD,WAAO,MAAM;AACTE,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH,KAFD;AAGH,GAZQ,EAYN,CAACN,QAAD,EAAWE,QAAX,CAZM,CAAT;;AAcA,QAAMO,WAAW,GAAG,MAAM;AACtB;AACAR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAJD;;AAMA,QAAMO,iBAAiB,GAAG,MAAM;AAC5BP,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAA,8BACI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA,mBAA+B,CAAC,MAAMS,IAAI,CAACC,KAAL,CAAYb,KAAK,CAACK,IAAN,GAAa,OAAd,GAAyB,EAApC,CAAP,EAAgDS,KAAhD,CAAsD,CAAC,CAAvD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,mBAAiC,CAAC,MAAMF,IAAI,CAACC,KAAL,CAAYb,KAAK,CAACK,IAAN,GAAa,KAAd,GAAuB,EAAlC,CAAP,EAA8CS,KAA9C,CAAoD,CAAC,CAArD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,mBAAiC,CAAC,MAAMF,IAAI,CAACC,KAAL,CAAYb,KAAK,CAACK,IAAN,GAAa,IAAd,GAAsB,EAAjC,CAAP,EAA6CS,KAA7C,CAAmD,CAAC,CAApD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,kBAAiC,CAAC,MAAQd,KAAK,CAACK,IAAN,GAAa,EAAd,GAAoB,GAA5B,EAAkCS,KAAlC,CAAwC,CAAC,CAAzC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOM,QAAC,cAAD;AACE,MAAA,MAAM,EAAEb,QADV;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,WAAW,EAAEO,WAHf;AAIE,MAAA,iBAAiB,EAAEC;AAJrB;AAAA;AAAA;AAAA;AAAA,YAPN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA7CD;;GAAMZ,S;;KAAAA,S;AA+CN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import Timer from \"./Timer/Timer\";\nimport {  } from \"./Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\";\n// import Input from \"../Input/Input\"\nimport \"./StopWatch.css\";\n\nconst Stopwatch = (props) => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, isPaused]);\n\n    const handleStart = () => {\n        // removeAttribute('disabled');\n        setIsActive(true);\n        setIsPaused(false);\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused);\n    };\n\n    return (\n        <div className=\"stop-watch\">\n            <div>\n                <span className=\"digits hour\">{(\"0\" + Math.floor((props.time / 3600000) % 60)).slice(-2)}:</span>\n                <span className=\"digits minute\">{(\"0\" + Math.floor((props.time / 60000) % 60)).slice(-2)}:</span>\n                <span className=\"digits second\">{(\"0\" + Math.floor((props.time / 1000) % 60)).slice(-2)}:</span>\n                <span className=\"digits milSec\">{(\"0\" + ((props.time / 10) % 100)).slice(-2)}</span>\n            </div>\n            { <ControlButtons\n                active={isActive}\n                isPaused={isPaused}\n                handleStart={handleStart}\n                handlePauseResume={handlePauseResume}\n            />}\n        </div>\n    );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}