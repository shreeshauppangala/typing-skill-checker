{"ast":null,"code":"var _jsxFileName = \"/home/pacewisdom/workspace/React/typing skill checker/src/Stopwatch/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\"; // import Input from \"../Input/Input\"\n\nimport \"./StopWatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stopwatch = () => {\n  _s();\n\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(true);\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime(time => time + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n\n  const handleStart = ({\n    Text\n  }) => {\n    removeAttribute('disabled');\n    setIsActive(true);\n    setIsPaused(false);\n  };\n\n  const handlePauseResume = () => {\n    setIsPaused(!isPaused);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stop-watch\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      time: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlButtons, {\n      active: isActive,\n      isPaused: isPaused,\n      handleStart: handleStart,\n      handlePauseResume: handlePauseResume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Stopwatch, \"SZkA2mnjq1bM+1ovwKx7+JaUQPI=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/pacewisdom/workspace/React/typing skill checker/src/Stopwatch/Stopwatch.js"],"names":["React","useState","useEffect","Timer","ControlButtons","Stopwatch","isActive","setIsActive","isPaused","setIsPaused","time","setTime","interval","setInterval","clearInterval","handleStart","Text","removeAttribute","handlePauseResume"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CACA;;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,GAAG,IAAf;;AACA,QAAIN,QAAQ,IAAIE,QAAQ,KAAK,KAA7B,EAAoC;AAChCI,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACzBF,QAAAA,OAAO,CAAED,IAAD,IAAUA,IAAI,GAAG,EAAlB,CAAP;AACH,OAFqB,EAEnB,EAFmB,CAAtB;AAGH,KAJD,MAIO;AACHI,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AACD,WAAO,MAAM;AACTE,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH,KAFD;AAGH,GAZQ,EAYN,CAACN,QAAD,EAAWE,QAAX,CAZM,CAAT;;AAcA,QAAMO,WAAW,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAC5BC,IAAAA,eAAe,CAAC,UAAD,CAAf;AACAV,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAJD;;AAMA,QAAMS,iBAAiB,GAAG,MAAM;AAC5BT,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEE;AAAb;AAAA;AAAA;AAAA;AAAA,YADJ,eAEM,QAAC,cAAD;AACE,MAAA,MAAM,EAAEJ,QADV;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,WAAW,EAAEO,WAHf;AAIE,MAAA,iBAAiB,EAAEG;AAJrB;AAAA;AAAA;AAAA;AAAA,YAFN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAxCD;;GAAMb,S;;KAAAA,S;AA0CN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\";\n// import Input from \"../Input/Input\"\nimport \"./StopWatch.css\";\n\nconst Stopwatch = () => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, isPaused]);\n\n    const handleStart = ({Text}) => {\n        removeAttribute('disabled');\n        setIsActive(true);\n        setIsPaused(false);\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused);\n    };\n\n    return (\n        <div className=\"stop-watch\">\n            <Timer time={time} />\n            { <ControlButtons\n                active={isActive}\n                isPaused={isPaused}\n                handleStart={handleStart}\n                handlePauseResume={handlePauseResume}\n            />}\n        </div>\n    );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}