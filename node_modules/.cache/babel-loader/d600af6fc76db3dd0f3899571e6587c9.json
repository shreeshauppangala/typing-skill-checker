{"ast":null,"code":"var _jsxFileName = \"/workspaces/typing-skill-checker/src/Stopwatch/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\";\nimport \"./StopWatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stopwatch = () => {\n  _s();\n\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(true);\n  const [time, setTime] = useState(0);\n  const [startTime, setStartTime] = useState(moment());\n  const [endTime, setEndTime] = useState(moment());\n  const [timeTaken, setTimeTaken] = useState(moment());\n  const [words, setWords] = useState('');\n  const numberOfWords = words.split(/[ .:;?!~,`\"&|]+/).length;\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime(time => time + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(false);\n    setStartTime(moment());\n  };\n\n  const handlePauseResume = () => {\n    setIsPaused(!isPaused);\n    setEndTime(moment());\n    typeof moment.duration(endTime.diff(startTime)).asMinutes() === 'number' && setTimeTaken(moment.duration(endTime.diff(startTime)).asMinutes());\n  };\n\n  let wordsPerMinute = numberOfWords / timeTaken;\n  console.log(wordsPerMinute);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stop-watch\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      time: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlButtons, {\n      active: isActive,\n      isPaused: isPaused,\n      handleStart: handleStart,\n      handlePauseResume: handlePauseResume,\n      words: words,\n      setWords: setWords,\n      numberOfWords: numberOfWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Stopwatch, \"vEAwXbhY4T0SEenfK8n5Q4QqnTQ=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/workspaces/typing-skill-checker/src/Stopwatch/Stopwatch.js"],"names":["React","useState","useEffect","moment","Timer","ControlButtons","Stopwatch","isActive","setIsActive","isPaused","setIsPaused","time","setTime","startTime","setStartTime","endTime","setEndTime","timeTaken","setTimeTaken","words","setWords","numberOfWords","split","length","interval","setInterval","clearInterval","handleStart","handlePauseResume","duration","diff","asMinutes","wordsPerMinute","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\"\nimport \"./StopWatch.css\";\n\nconst Stopwatch = () => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n    const [startTime, setStartTime] = useState(moment());\n    const [endTime, setEndTime] = useState(moment())\n    const [timeTaken, setTimeTaken] = useState(moment())\n    const [words, setWords] = useState('')\n\n    const numberOfWords = words.split(/[ .:;?!~,`\"&|]+/).length;\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, isPaused]);\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsPaused(false);\n        setStartTime(moment())\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused)\n        setEndTime(moment())\n        typeof (moment.duration(endTime.diff(startTime)).asMinutes()) === 'number' && setTimeTaken(moment.duration(endTime.diff(startTime)).asMinutes())\n    };\n\n    let wordsPerMinute = numberOfWords / timeTaken\n    console.log(wordsPerMinute)\n\n    return (\n        <div className=\"stop-watch\">\n            <Timer time={ time } />\n            <ControlButtons\n                active={ isActive }\n                isPaused={ isPaused }\n                handleStart={ handleStart }\n                handlePauseResume={ handlePauseResume }\n                words={ words }\n                setWords={ setWords }\n                numberOfWords={ numberOfWords }\n            />\n        </div>\n    );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}