{"ast":null,"code":"var _jsxFileName = \"/home/pacewisdom/workspace/React/typing-skill-checker/src/Stopwatch/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\";\nimport \"./StopWatch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stopwatch = props => {\n  _s();\n\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(true);\n  const [time, setTime] = useState(0);\n  const [startTime, setStartTime] = useState(moment());\n  const [endTime, setEndTime] = useState(moment());\n  const [timeTaken, setTimeTaken] = useState(moment());\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime(time => time + 10);\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(false);\n    setStartTime(moment());\n  };\n\n  const handlePauseResume = () => {\n    setIsPaused(!isPaused);\n    setEndTime(moment());\n    setTimeTaken(moment.duration(endTime.diff(startTime)).asMinutes());\n    console.log(timsetTimeTakeneTaken);\n  }; // let wordsPerMinute =props.numberOfWords/timeTaken\n  // console.log(wordsPerMinute)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stop-watch\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      time: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlButtons, {\n      active: isActive,\n      isPaused: isPaused,\n      handleStart: handleStart,\n      handlePauseResume: handlePauseResume // onChange={onChange}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Stopwatch, \"3fQ6FyYOpAsKIZE6DCBbbQIJvJM=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/pacewisdom/workspace/React/typing-skill-checker/src/Stopwatch/Stopwatch.js"],"names":["React","useState","useEffect","moment","Timer","ControlButtons","Stopwatch","props","isActive","setIsActive","isPaused","setIsPaused","time","setTime","startTime","setStartTime","endTime","setEndTime","timeTaken","setTimeTaken","interval","setInterval","clearInterval","handleStart","handlePauseResume","duration","diff","asMinutes","console","log","timsetTimeTakeneTaken"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAACE,MAAM,EAAP,CAA1C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAACE,MAAM,EAAP,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAACE,MAAM,EAAP,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,QAAQ,GAAG,IAAf;;AACA,QAAIZ,QAAQ,IAAIE,QAAQ,KAAK,KAA7B,EAAoC;AAChCU,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACzBR,QAAAA,OAAO,CAAED,IAAD,IAAUA,IAAI,GAAG,EAAlB,CAAP;AACH,OAFqB,EAEnB,EAFmB,CAAtB;AAGH,KAJD,MAIO;AACHU,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AACD,WAAO,MAAM;AACTE,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH,KAFD;AAGH,GAZQ,EAYN,CAACZ,QAAD,EAAWE,QAAX,CAZM,CAAT;;AAcA,QAAMa,WAAW,GAAG,MAAM;AACtBd,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,IAAAA,YAAY,CAACZ,MAAM,EAAP,CAAZ;AACH,GAJD;;AAMA,QAAMqB,iBAAiB,GAAG,MAAM;AAC5Bb,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACAO,IAAAA,UAAU,CAACd,MAAM,EAAP,CAAV;AACAgB,IAAAA,YAAY,CAAChB,MAAM,CAACsB,QAAP,CAAgBT,OAAO,CAACU,IAAR,CAAaZ,SAAb,CAAhB,EAAyCa,SAAzC,EAAD,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,qBAAZ;AACH,GALD,CA5ByB,CAmCrB;AACA;;;AAEJ,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAElB;AAAb;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AACI,MAAA,MAAM,EAAEJ,QADZ;AAEI,MAAA,QAAQ,EAAEE,QAFd;AAGI,MAAA,WAAW,EAAEa,WAHjB;AAII,MAAA,iBAAiB,EAAEC,iBAJvB,CAKI;;AALJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAlDD;;GAAMlB,S;;KAAAA,S;AAoDN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Timer from \"./Timer/Timer\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\"\nimport \"./StopWatch.css\";\n\nconst Stopwatch = (props) => {\n    const [isActive, setIsActive] = useState(false);\n    const [isPaused, setIsPaused] = useState(true);\n    const [time, setTime] = useState(0);\n    const [startTime, setStartTime] = useState(moment());\n    const [endTime, setEndTime] = useState(moment())\n    const [timeTaken, setTimeTaken] = useState(moment())\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && isPaused === false) {\n            interval = setInterval(() => {\n                setTime((time) => time + 10);\n            }, 10);\n        } else {\n            clearInterval(interval);\n        }\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, isPaused]);\n\n    const handleStart = () => {\n        setIsActive(true);\n        setIsPaused(false);\n        setStartTime(moment())\n    };\n\n    const handlePauseResume = () => {\n        setIsPaused(!isPaused)\n        setEndTime(moment())\n        setTimeTaken(moment.duration(endTime.diff(startTime)).asMinutes())\n        console.log(timsetTimeTakeneTaken)\n    };\n\n        // let wordsPerMinute =props.numberOfWords/timeTaken\n        // console.log(wordsPerMinute)\n\n    return (\n        <div className=\"stop-watch\">\n            <Timer time={time} />\n            <ControlButtons\n                active={isActive}\n                isPaused={isPaused}\n                handleStart={handleStart}\n                handlePauseResume={handlePauseResume}\n                // onChange={onChange}\n            />\n        </div>\n    );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}